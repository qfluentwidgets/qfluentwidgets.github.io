import{_ as n,o as s,c as e,e as a}from"./app-cc992c34.js";const t={},o=a(`<h2 id="theme-mode" tabindex="-1"><a class="header-anchor" href="#theme-mode" aria-hidden="true">#</a> Theme mode</h2><p>You can use the <code>setTheme()</code> method to switch the light/dark theme of PyQt-Fluent-Widgets. The parameter of <code>setTheme()</code> accepts the following three values:</p><ul><li><code>Theme.LIGHT</code>: Light theme</li><li><code>Theme.DARK</code>: Dark theme</li><li><code>Theme.AUTO</code>: Follow system theme. If the system theme cannot be detected, the light theme will be used.</li></ul><p>When the theme changes, <code>qconfig</code> will emit the <code>themeChanged</code> signal.</p><p>If you want to automatically switch the interface style when the theme changes, you can inherit <code>StyleSheetBase</code> and override the <code>path()</code> method. Suppose you have a <code>MainWindow</code> class and its qss file paths are <code>app/resource/qss/light/main_window.qss</code> and <code>app/resource/qss/dark/main_window.qss</code>, the code can be written like this:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> enum <span class="token keyword">import</span> Enum
<span class="token keyword">from</span> qfluentwidgets <span class="token keyword">import</span> StyleSheetBase<span class="token punctuation">,</span> Theme<span class="token punctuation">,</span> isDarkTheme<span class="token punctuation">,</span> qconfig


<span class="token keyword">class</span> <span class="token class-name">StyleSheet</span><span class="token punctuation">(</span>StyleSheetBase<span class="token punctuation">,</span> Enum<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot; Style sheet  &quot;&quot;&quot;</span>

    MAIN_WINDOW <span class="token operator">=</span> <span class="token string">&quot;main_window&quot;</span>

    <span class="token keyword">def</span> <span class="token function">path</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> theme<span class="token operator">=</span>Theme<span class="token punctuation">.</span>AUTO<span class="token punctuation">)</span><span class="token punctuation">:</span>
        theme <span class="token operator">=</span> qconfig<span class="token punctuation">.</span>theme <span class="token keyword">if</span> theme <span class="token operator">==</span> Theme<span class="token punctuation">.</span>AUTO <span class="token keyword">else</span> theme
        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f&quot;app/resource/qss/</span><span class="token interpolation"><span class="token punctuation">{</span>theme<span class="token punctuation">.</span>value<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>value<span class="token punctuation">}</span></span><span class="token string">.qss&quot;</span></span>


<span class="token keyword">class</span> <span class="token class-name">MainWindow</span><span class="token punctuation">(</span>QWidget<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> parent<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>parent<span class="token operator">=</span>parent<span class="token punctuation">)</span>

        <span class="token comment"># apply style sheet to main window</span>
        StyleSheet<span class="token punctuation">.</span>MAIN_WINDOW<span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="theme-color" tabindex="-1"><a class="header-anchor" href="#theme-color" aria-hidden="true">#</a> Theme color</h3><p>You can use <code>setThemeColor()</code> method to change the theme color of PyQt-Fluent-Widgets. This method accepts the following three types of parameters:</p><ul><li><code>QColor</code></li><li><code>Qt.GlobalColor</code></li><li><code>str</code>: Hex color strings or color names, such as <code>#0065d5</code> or <code>red</code>.</li></ul><p>When the theme color changes, the config instance managed by <code>qconfig</code> will emit the <code>themeColorChanged</code> signal.</p>`,10),c=[o];function p(i,l){return s(),e("div",null,c)}const u=n(t,[["render",p],["__file","index.html.vue"]]);export{u as default};
