import{_ as n,a as s,b as a}from"./Edit_Light_Qss_Dialog-44576d9f.js";import{_ as e,o as t,c as o,e as p}from"./app-afb9b4f3.js";const c={},i=p(`<h2 id="主题模式" tabindex="-1"><a class="header-anchor" href="#主题模式" aria-hidden="true">#</a> 主题模式</h2><p><code>setTheme()</code> 函数用于切换 PyQt-Fluent-Widgets 全部组件的亮暗主题。该函数接受下述值：</p><ul><li><code>Theme.LIGHT</code>：浅色主题</li><li><code>Theme.DARK</code>：深色主题</li><li><code>Theme.AUTO</code>：跟随系统主题。如果无法检测到系统的主题，将使用浅色主题。</li></ul><p>当主题发生改变时，<code>qconfig</code> 会发出 <code>themeChanged</code> 信号。</p><p>如果想在主题发生改变时，自动切换界面的样式，可以继承 <code>StyleSheetBase</code> 类并重写 <code>path()</code> 方法。假设有一个 <code>MainWindow</code> 类，它的 qss 文件路径为 <code>app/resource/qss/light/main_window.qss</code> 和 <code>app/resource/qss/dark/main_window.qss</code>，那么代码可以这么写：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> enum <span class="token keyword">import</span> Enum
<span class="token keyword">from</span> qfluentwidgets <span class="token keyword">import</span> StyleSheetBase<span class="token punctuation">,</span> Theme<span class="token punctuation">,</span> isDarkTheme<span class="token punctuation">,</span> qconfig


<span class="token keyword">class</span> <span class="token class-name">StyleSheet</span><span class="token punctuation">(</span>StyleSheetBase<span class="token punctuation">,</span> Enum<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot; Style sheet  &quot;&quot;&quot;</span>

    MAIN_WINDOW <span class="token operator">=</span> <span class="token string">&quot;main_window&quot;</span>

    <span class="token keyword">def</span> <span class="token function">path</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> theme<span class="token operator">=</span>Theme<span class="token punctuation">.</span>AUTO<span class="token punctuation">)</span><span class="token punctuation">:</span>
        theme <span class="token operator">=</span> qconfig<span class="token punctuation">.</span>theme <span class="token keyword">if</span> theme <span class="token operator">==</span> Theme<span class="token punctuation">.</span>AUTO <span class="token keyword">else</span> theme
        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f&quot;app/resource/qss/</span><span class="token interpolation"><span class="token punctuation">{</span>theme<span class="token punctuation">.</span>value<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>value<span class="token punctuation">}</span></span><span class="token string">.qss&quot;</span></span>


<span class="token keyword">class</span> <span class="token class-name">MainWindow</span><span class="token punctuation">(</span>QWidget<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> parent<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>parent<span class="token operator">=</span>parent<span class="token punctuation">)</span>

        <span class="token comment"># apply style sheet to main window</span>
        StyleSheet<span class="token punctuation">.</span>MAIN_WINDOW<span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="自定义样式" tabindex="-1"><a class="header-anchor" href="#自定义样式" aria-hidden="true">#</a> 自定义样式</h2><p>如果你对内置组件的样式感到不满，希望对其进行微调，可以使用 <code>setCustomStyleSheet()</code> 在原有样式的基础上添加新样式，该函数的签名如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">setCustomStyleSheet</span><span class="token punctuation">(</span>widget<span class="token punctuation">:</span> QWidget<span class="token punctuation">,</span> lightQss<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> darkQss<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中 <code>widget</code> 是需要调整样式的组件，<code>lightQss</code> 和 <code>darkQss</code> 是浅/深色主题下 <strong>添加</strong> 的自定义样式。</p><p>举个例子，将 <code>PushButton</code> 的圆角调成 10px：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>button <span class="token operator">=</span> PushButton<span class="token punctuation">(</span><span class="token string">&#39;Button&#39;</span><span class="token punctuation">,</span> self<span class="token punctuation">)</span>

<span class="token comment"># 添加自定义样式表</span>
qss <span class="token operator">=</span> <span class="token string">&#39;PushButton{border-radius: 10px}&#39;</span>
setCustomStyleSheet<span class="token punctuation">(</span>button<span class="token punctuation">,</span> qss<span class="token punctuation">,</span> qss<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 QtDesigner 中，你可以通过新增动态属性来达到自定义样式的目的，操作步骤如下：</p><ol><li><p>添加字符串类型的动态属性</p><p><img src="`+n+'" alt="添加字符串动态属性"></p></li><li><p>在创建动态属性对话框中将属性名设置为 <code>lightCustomQss</code>，深色模式就设置为 <code>darkCustomQss</code></p><p><img src="'+s+'" alt="设置属性名"></p></li><li><p>点击属性旁边的 <code>...</code> 按钮，在编辑文本对话框中编辑 <code>lightCustomQss</code></p><p><img src="'+a+'" alt="设置属性名"></p></li></ol><h2 id="主题色" tabindex="-1"><a class="header-anchor" href="#主题色" aria-hidden="true">#</a> 主题色</h2><p><code>setThemeColor()</code> 函数用于修改全部组件的主题色。该函数接受三种类型的值：</p><ul><li><code>QColor</code></li><li><code>Qt.GlobalColor</code></li><li><code>str</code>：十六进制颜色字符串或者颜色名字，比如 <code>#0065d5</code> 或者 <code>red</code></li></ul><p>当主题发生改变时，<code>qconfig</code> 管理的配置实例会发出 <code>themeColorChanged</code> 信号。</p>',18),l=[i];function u(d,r){return t(),o("div",null,l)}const h=e(c,[["render",u],["__file","index.html.vue"]]);export{h as default};
