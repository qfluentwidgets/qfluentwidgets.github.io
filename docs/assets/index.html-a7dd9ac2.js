import{_ as t}from"./IconInterface-8ea410a6.js";import{_ as e,r as o,o as p,c,b as n,d as s,a as l,e as i}from"./app-26fa04e1.js";const u={},r=n("h2",{id:"内置图标",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#内置图标","aria-hidden":"true"},"#"),s(" 内置图标")],-1),d=n("p",null,"QFluentWidgets 中的组件一般支持以下三种图标参数类型：",-1),k=n("ul",null,[n("li",null,[n("code",null,"str"),s(": 图标路径")]),n("li",null,[n("code",null,"QIcon"),s("：Qt 图标")]),n("li",null,[n("code",null,"FluentIconBase"),s(": 流畅图标抽象类")])],-1),m=n("code",null,"FluentIcon",-1),v=n("code",null,"FluentIconBase",-1),b={href:"https://github.com/zhiyiYo/PyQt-Fluent-Widgets/releases/download/v1.1.6/PyQt-Fluent-Widgets-Gallery_v1.1.6_lite_windows_x64.zip",target:"_blank",rel:"noopener noreferrer"},h=n("img",{src:t,alt:"IconInterface"},null,-1),g=i(`<h2 id="自定义图标" tabindex="-1"><a class="header-anchor" href="#自定义图标" aria-hidden="true">#</a> 自定义图标</h2><h3 id="更改颜色" tabindex="-1"><a class="header-anchor" href="#更改颜色" aria-hidden="true">#</a> 更改颜色</h3><p>流畅图标基类提供了 <code>FluentIconBase.icon()</code> 方法:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">icon</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> theme<span class="token operator">=</span>Theme<span class="token punctuation">.</span>AUTO<span class="token punctuation">,</span> color<span class="token punctuation">:</span> QColor <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> QIcon<span class="token punctuation">:</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以根据传入的主题或者颜色返回一个 <code>QIcon</code> 图标，只有在图标类型为 svg 图标时，<code>color</code> 参数才会起作用。下面给出一个示例：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 使用浅色主题图标</span>
button <span class="token operator">=</span> ToolButton<span class="token punctuation">(</span>FluentIcon<span class="token punctuation">.</span>ADD<span class="token punctuation">.</span>icon<span class="token punctuation">(</span>Theme<span class="token punctuation">.</span>LIGHT<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 使用深色主题图标</span>
button <span class="token operator">=</span> ToolButton<span class="token punctuation">(</span>FluentIcon<span class="token punctuation">.</span>ADD<span class="token punctuation">.</span>icon<span class="token punctuation">(</span>Theme<span class="token punctuation">.</span>DARK<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 使用颜色名称</span>
button <span class="token operator">=</span> ToolButton<span class="token punctuation">(</span>FluentIcon<span class="token punctuation">.</span>ADD<span class="token punctuation">.</span>icon<span class="token punctuation">(</span>color<span class="token operator">=</span><span class="token string">&#39;red&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 使用十六进制字符串</span>
button <span class="token operator">=</span> ToolButton<span class="token punctuation">(</span>FluentIcon<span class="token punctuation">.</span>ADD<span class="token punctuation">.</span>icon<span class="token punctuation">(</span>color<span class="token operator">=</span><span class="token string">&#39;#ff0000&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 使用 Qt.GlobalColor</span>
button <span class="token operator">=</span> ToolButton<span class="token punctuation">(</span>FluentIcon<span class="token punctuation">.</span>ADD<span class="token punctuation">.</span>icon<span class="token punctuation">(</span>color<span class="token operator">=</span>Qt<span class="token punctuation">.</span>red<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 使用 QColor</span>
button <span class="token operator">=</span> ToolButton<span class="token punctuation">(</span>FluentIcon<span class="token punctuation">.</span>ADD<span class="token punctuation">.</span>icon<span class="token punctuation">(</span>color<span class="token operator">=</span>QColor<span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="添加图标" tabindex="-1"><a class="header-anchor" href="#添加图标" aria-hidden="true">#</a> 添加图标</h3><p>如果想在切换主题时自动更换图标，可以继承 <code>FluentIconBase</code> 类并重写 <code>path()</code> 函数来给出不同主题下图标的路径。下面是一个示例：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> enum <span class="token keyword">import</span> Enum

<span class="token keyword">from</span> qfluentwidgets <span class="token keyword">import</span> getIconColor<span class="token punctuation">,</span> Theme<span class="token punctuation">,</span> FluentIconBase


<span class="token keyword">class</span> <span class="token class-name">MyFluentIcon</span><span class="token punctuation">(</span>FluentIconBase<span class="token punctuation">,</span> Enum<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot; Custom icons &quot;&quot;&quot;</span>

    ADD <span class="token operator">=</span> <span class="token string">&quot;Add&quot;</span>
    CUT <span class="token operator">=</span> <span class="token string">&quot;Cut&quot;</span>
    COPY <span class="token operator">=</span> <span class="token string">&quot;Copy&quot;</span>

    <span class="token keyword">def</span> <span class="token function">path</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> theme<span class="token operator">=</span>Theme<span class="token punctuation">.</span>AUTO<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># getIconColor() 根据主题返回字符串 &quot;white&quot; 或者 &quot;black&quot;</span>
        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f&#39;:/icons/</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>value<span class="token punctuation">}</span></span><span class="token string">_</span><span class="token interpolation"><span class="token punctuation">{</span>getIconColor<span class="token punctuation">(</span>theme<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">.svg&#39;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之后就可以将 <code>MyFluentIcon</code> 的枚举成员直接作为参数传给需要图标的组件，比如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> qfluentwidgets <span class="token keyword">import</span> ToolButton<span class="token punctuation">,</span> toggleTheme

<span class="token comment"># 创建工具按钮</span>
button <span class="token operator">=</span> ToolButton<span class="token punctuation">(</span>MyFluentIcon<span class="token punctuation">.</span>ADD<span class="token punctuation">)</span>

<span class="token comment"># 更换图标</span>
button<span class="token punctuation">.</span>setIcon<span class="token punctuation">(</span>MyFluentIcon<span class="token punctuation">.</span>CUT<span class="token punctuation">)</span>

<span class="token comment"># 切换主题，图标也会跟着改变</span>
button<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>toggleTheme<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11);function _(y,f){const a=o("ExternalLinkIcon");return p(),c("div",null,[r,d,k,n("p",null,[s("QFluentWidgets 提供的 "),m,s(" 枚举类继承自 "),v,s(", 包含数百个矢量图标，可以在 "),n("a",b,[s("gallery"),l(a)]),s(" 示例的图标界面查看和搜索图标。 "),h]),g])}const T=e(u,[["render",_],["__file","index.html.vue"]]);export{T as default};
